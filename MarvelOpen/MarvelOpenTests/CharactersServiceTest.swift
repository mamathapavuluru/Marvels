//
//  CharactersServiceTest.swift
//  MarvelOpenTests
//
//  Created by Mamatha on 5/15/22.
//

import XCTest

class CharactersServiceTest: XCTestCase {
    
    private var apiAuthenticator: MD5Authenticator {
        MD5Authenticator(keyData: APIAuthenticationKeyRetriever())
    }

    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }
    
    func testGetCharactersListAPICall()
    {
        let expectation = XCTestExpectation.init(description: "Characters List API")
        let params = apiAuthenticator.authenticate(with: Date().timeIntervalSince1970)
        
        HttpRequestHelper().GET(url: kCharactersAPIURL, params: params!, httpHeader: .application_json) { success, data in
            if success {
                expectation.fulfill()
            } else {
                XCTFail("Fail")
            }
        }
        self.wait(for: [expectation], timeout: 20)
    }
    
    func testGetCharactersListAPICallFailure()
    {
        let expectation = XCTestExpectation.init(description: "Characters List API")
        HttpRequestHelper().GET(url: kCharactersAPIURL, params: ["" : ""], httpHeader: .application_json) { success, data in
            if success {
                XCTFail("API with nil parameters should not work")
            } else {
                XCTAssertNotNil("Error occured in CharacterListAPICall Failure")
                expectation.fulfill()
            }
        }
        self.wait(for: [expectation], timeout: 20)
    }
    
    func testGetCharacterDetailsAPICall()
        {
            let expectation = XCTestExpectation.init(description: "Character Detail API")
            let params = apiAuthenticator.authenticate(with: Date().timeIntervalSince1970)
            HttpRequestHelper().GET(url: kCharactersAPIURL + "1009144", params: params!, httpHeader: .application_json) { success, data in
                if success {
                    XCTFail("API with nil character id should not work")
                } else {
                    XCTAssertNotNil("Error occured in CharacterDetailAPICall Failure")
                    expectation.fulfill()
                }
            }
            self.wait(for: [expectation], timeout: 20)
        }
        
        
}
